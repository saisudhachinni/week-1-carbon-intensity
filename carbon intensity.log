from collections import defaultdict
import logging
import pandas as pd
import requests

import json,pprint

logging.basicConfig(filename='logs.log',filemode='w',format='%(levelname)s--%(asctime)s::%(filename)s::%(lineno)d::%(message)s',

                    level=logging.DEBUG)
base_url = 'https://api.carbonintensity.org.uk/regionals'
#
response = requests.get(base_url)

dnoregion = []
shortname = []
forecast = []
index = []
result = []
fuel = []
perc = []
regionid = []

if response.status_code == 200:
    logging.info('API Response for the {} is Success'.format(base_url))
    data = response.json()
    if 'data' in data.keys():
        data_inside = data['data']
        for date_ in data_inside:
            regions = date_['regions']
            for region in regions:
                temp_dict = defaultdict(set)
                my_dict = {}
                dnoregion.append(region['dnoregion'])
                forecast.append(region['intensity']['forecast'])
                index.append(region['intensity']['index'])
                regionid.append(region['regionid'])
                shortname.append(region['shortname'])
                generator_mix = region['generationmix']
                for generator_fuel in generator_mix:
                    for key, value in generator_fuel.items():
                        temp_dict[key].add(value)
                for key, value in temp_dict.items():
                    my_dict[key] = "".join(str(value))

                for keys,values in my_dict.items():
                    if keys == 'fuel':
                        fuel.append(values)
                    elif keys == 'perc':
                        perc.append(values)
        else:
            logging.error('No Key found for {}'.format('data'))

        data_df = {'dnoregion': dnoregion, 'shortname': shortname, 'regionid': regionid, 'forecast': forecast,
                   'index': index, 'fuel': fuel, 'perc': perc}
        dict_df = pd.DataFrame({key: pd.Series(value,dtype=pd.StringDtype()) for key, value in data_df.items()})
        # dict_df['fuel'] = dict_df['fuel'].str.replace(r"([0-9]+)$", "")
        # dict_df.replace({'\'': '"'}, regex=True)
        dict_df['fuel'] = dict_df['fuel'].str.strip("{},")
        dict_df['perc'] = dict_df['perc'].str.strip("{},")
        dict_df.to_csv('carbon_intensity.csv')
        logging.info('Successfully written to CSV file')
else:
    logging.error('Check {} and the reponse is {}'.format(base_url, response.status_code))










